
.. _program_listing_file_fields2cover_objectives_path_objective.h:

Program Listing for File path_objective.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_fields2cover_objectives_path_objective.h>` (``fields2cover/objectives/path_objective.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //=============================================================================
   //    Copyright (C) 2021-2022 Wageningen University - All Rights Reserved
   //                     Author: Gonzalo Mier
   //                        BSD-3 License
   //=============================================================================
   
   #pragma once
   #ifndef FIELDS2COVER_OBJECTIVES_PATH_OBJECTIVE_H_
   #define FIELDS2COVER_OBJECTIVES_PATH_OBJECTIVE_H_
   
   #include <vector>
   #include "fields2cover/types.h"
   
   namespace f2c::obj {
   
   
   class PathObjective {
    public:
     // Avoid using variadic templates. SWIG don't work well with it
   
     template <typename T1>
     double computeCostWithMinimizingSign(const T1& t1) {
       return (isMinimizing() ? 1.0 : -1.0) * computeCost(t1);
     }
     template <typename T1, typename T2>
     double computeCostWithMinimizingSign(const T1& t1, const T2& t2) {
       return (isMinimizing() ? 1.0 : -1.0) * computeCost(t1, t2);
     }
     template <typename T1, typename T2, typename T3>
     double computeCostWithMinimizingSign(
         const T1& t1, const T2& t2, const T3& t3) {
       return (isMinimizing() ? 1.0 : -1.0) * computeCost(t1, t2, t3);
     }
     template <typename T1, typename T2, typename T3, typename T4>
     double computeCostWithMinimizingSign(
         const T1& t1, const T2& t2, const T3& t3, const T4& t4) {
       return (isMinimizing() ? 1.0 : -1.0) * computeCost(t1, t2, t3, t4);
     }
   
   
    public:
     virtual bool isMinimizing() const { return true;}
     virtual bool isMaximizing() const { return !isMinimizing();}
   
   
    public:
     virtual double computeCost(const F2CPoint& p1, const F2CPoint& p2);
   
     virtual double computeCost(
         const F2CPoint& p1, double ang1, const F2CPoint& p2);
   
     virtual double computeCost(
         const F2CPoint& p1, double ang1, const F2CPoint& p2, double ang2);  // = 0
   
     virtual double computeCost(
         const F2CPoint& p1, const F2CPoint& p2, double ang2);
   
     virtual double computeCost(const F2CSwath& s, const F2CPoint& p);
   
     virtual double computeCost(const F2CSwath& s1, const F2CSwath& s2);
   
     virtual double computeCost(const F2CSwath& s, const F2CPoint& p, double ang);
   
     virtual double computeCost(const F2CPoint& p, const F2CSwath& s);
   
     virtual double computeCost(const F2CPoint& p, double ang, const F2CSwath& s);
   
     virtual double computeCost(const std::vector<F2CPoint>& ps);
   
     virtual double computeCost(const F2CMultiPoint& ps);
   
     virtual double computeCost(const F2CSwath& s, const F2CMultiPoint& ps);
   
     virtual double computeCost(const F2CSwaths& s, const F2CMultiPoint& ps);
   
     virtual double computeCost(const F2CMultiPoint& ps, const F2CSwath& s);
   
     virtual double computeCost(const F2CMultiPoint& ps, const F2CSwaths& s);
   
     virtual double computeCost(const F2CSwath& s);
   
     virtual double computeCost(const F2CSwaths& swaths);
   
     virtual double computeCost(const F2CRoute& r);
   
     virtual double computeCost(const F2CPath& p);
   };
   
   
   }  // namespace f2c::obj
   
   #endif  // FIELDS2COVER_OBJECTIVES_PATH_OBJECTIVE_H_
